


<Add_EditBook EditingBook="EditingBook" OnBookAdded="AddNewBook" OnBookChanged="UpdateBook" />

<h3>Book List</h3>
@if (books.Count > 0)
{
   
    <table class="table">
        <thead>
            <tr>
                <th>Book ID</th>
                <th>Title</th>
                <th>Description</th>
                <th>Authors</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in books)
            {
                <tr>
                    <td>@book.Id</td>
                    <td>@book.Title</td>
                    <td>@book.Description</td>
                    <td>
                    
                       @if (book != null && book.Authors != null)
                          {
                           <ul>
                              @foreach (var author in book.Authors)
                               {
                               <li>@author.Name</li>
                               }
                         </ul>
                            }
                      else
                       {
                         <p>No authors available.</p>
                       }

                   
                    </td>
                    <td>
                        <button class="btn btn-warning" @onclick="(() => EditBook(book))">Edit</button>
                        <button class="btn btn-danger" @onclick="(() => DeleteBook(book.Id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    
}
else
{
    <p>No books found.</p>
}

@code {

    private List<BookDTO> books = new List<BookDTO>()

    {

       new BookDTO { Id = Guid.NewGuid(), Title = "Book 1", Description = "Description 1", Authors = new List<AuthorDTO>() {new AuthorDTO {Id = Guid.NewGuid(), Name= "Author 1" }, { new AuthorDTO { Id = Guid.NewGuid(), Name = "Author 1" } } } },
       new BookDTO { Id = Guid.NewGuid(), Title = "Book 2", Description = "Description 2", Authors = new List<AuthorDTO>() {new AuthorDTO {Id = Guid.NewGuid(),Name = "Author2" } } },
       new BookDTO { Id = Guid.NewGuid(), Title = "Book 3", Description = "Description 3", Authors = new List<AuthorDTO>() {new AuthorDTO {Id = Guid.NewGuid(),Name = "Author 3" } } },

    };

    public BookDTO EditingBook = null;

    private void DeleteBook(Guid id)
    {
        this.books.RemoveAll(b => b.Id == id);
    }
       
    private void addBook(BookDTO book)
    {
        this.books.Add(book);
    }

    private async Task AddNewBook(BookDTO book)
    {
        this.books.Add(book);
    }

    private async Task EditBook(BookDTO book)
    {
        EditingBook = book;
    }

    private async Task UpdateBook(BookDTO book)
    {
        var index = this.books.FindIndex(b => b.Id == book.Id);
        this.books[index] = book;
        EditingBook = null;
    }
}
